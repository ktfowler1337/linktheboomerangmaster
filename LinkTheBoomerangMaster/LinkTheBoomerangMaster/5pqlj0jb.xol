#region Using Statements
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
#endregion

namespace LinkTheBoomerangMaster
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class GameController : Game
    {

        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        public static int ScreenWidth;
        public static int ScreenHeight;

        private Texture2D background;
        private Texture2D scoreboard;
        private Texture2D cornerWallBlock;
        private Texture2D HorWallBlock;

        public GameController()
            : base()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            ScreenHeight = GraphicsDevice.Viewport.Height;
            ScreenWidth = GraphicsDevice.Viewport.Width;
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);
            background = Content.Load<Texture2D>("ground");
            scoreboard = Content.Load<Texture2D>("link");
            cornerWallBlock = Content.Load<Texture2D>("wall-V-1");
            HorWallBlock = Content.Load<Texture2D>("wall-H");
            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            ScreenWidth = GraphicsDevice.Viewport.Width;
            ScreenHeight = GraphicsDevice.Viewport.Height;
            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {

            spriteBatch.Begin(SpriteSortMode.FrontToBack, BlendState.Opaque, SamplerState.LinearWrap, DepthStencilState.Default, RasterizerState.CullNone);

            spriteBatch.Draw(background, Vector2.Zero, new Rectangle(0, 0, 800, 480), Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
            
            spriteBatch.End();

            spriteBatch.Begin(SpriteSortMode.FrontToBack, BlendState.Opaque, SamplerState.LinearWrap, DepthStencilState.Default, RasterizerState.CullNone);
            spriteBatch.Draw(HorWallBlock, new Vector2(HorWallBlock.Width, ScreenHeight - HorWallBlock.Height), new Rectangle(HorWallBlock.Width, ScreenHeight - HorWallBlock.Height, ScreenWidth + HorWallBlock.Width, HorWallBlock.Height), Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
            spriteBatch.End();

            spriteBatch.Begin();
            //new Vector2((float)ScreenWidth, (float)(ScreenHeight * 0.2))
            spriteBatch.Draw(scoreboard, new Rectangle(0, 0, ScreenWidth, (int)(ScreenHeight * 0.2)), Color.White);

            spriteBatch.Draw(cornerWallBlock, new Rectangle(0, ScreenHeight - cornerWallBlock.Height, cornerWallBlock.Width, cornerWallBlock.Height), Color.White);
            spriteBatch.Draw(cornerWallBlock, new Rectangle(ScreenWidth - cornerWallBlock.Width, ScreenHeight - cornerWallBlock.Height, cornerWallBlock.Width, cornerWallBlock.Height), Color.White);
            spriteBatch.End();
            
            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }
    }
}
